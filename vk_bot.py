import os
import random
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from storage import save_qa, load_qa, clear_qa
from quiz_bot import parse_qaz, is_correct


def build_keyboard():
    kb = VkKeyboard(one_time=False)
    kb.add_button('–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å', color=VkKeyboardColor.POSITIVE)
    kb.add_button('–°–¥–∞—Ç—å—Å—è', color=VkKeyboardColor.NEGATIVE)
    kb.add_line()
    kb.add_button('–ú–æ–π —Å—á—ë—Ç', color=VkKeyboardColor.PRIMARY)
    return kb


def pick_and_send_new_question(vk, user_id):
    folder = "quiz-questions"

    files = [f for f in os.listdir(folder)
             if not f.startswith('.') and os.path.isfile(os.path.join(folder, f))]
    if not files:
        vk.messages.send(
            user_id=user_id,
            random_id=random.randint(1, 10**9),
            message="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"
        )
        return False

    filepath = os.path.join(folder, random.choice(files))
    try:
        q, a, z = parse_qaz(filepath)
    except Exception:
        vk.messages.send(
            user_id=user_id,
            random_id=random.randint(1, 10**9),
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å"
        )
        return False

    if not q:
        vk.messages.send(
            user_id=user_id,
            random_id=random.randint(1, 10**9),
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å"
        )
        return False

    save_qa(user_id, q, a, z)
    vk.messages.send(
        user_id=user_id,
        random_id=random.randint(1, 10**9),
        message=q
    )
    return True


def handle_event(event, vk, keyboard):
    text = (event.text or "").strip()
    lower = text.lower()
    user_id = event.user_id

    if lower == "–Ω–∞—á–∞—Ç—å":
        vk.messages.send(user_id=user_id, random_id=0,
                         message="–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Ç–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ üëá",
                         keyboard=keyboard.get_keyboard())
        return

    if lower == "–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        pick_and_send_new_question(vk, user_id)
        return

    if lower == "—Å–¥–∞—Ç—å—Å—è":
        data = load_qa(user_id)
        if not data:
            vk.messages.send(user_id=user_id, random_id=0, message="–ê–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç")
            return
        ans = data.get("answer") or "(–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        vk.messages.send(user_id=user_id, random_id=0, message=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{ans}")
        clear_qa(user_id)
        pick_and_send_new_question(vk, user_id)
        return

    if lower == "–º–æ–π —Å—á—ë—Ç":
        vk.messages.send(user_id=user_id, random_id=0, message="–°—á—ë—Ç –ø–æ–∫–∞ –Ω–µ —Å—á–∏—Ç–∞–µ–º")
        return

    data = load_qa(user_id)
    if not data:
        vk.messages.send(user_id=user_id, random_id=0,
                         message="–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª.")
        return

    if is_correct(text, data["answer"], data["zachet"]):
        vk.messages.send(user_id=user_id, random_id=0,
                         message="–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª.")
        clear_qa(user_id)
    else:
        vk.messages.send(user_id=user_id, random_id=0,
                         message="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚Ä¶ –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?")

def main():
    vk_session = vk_api.VkApi(token=os.environ["VK_GROUP_TOKEN"])
    vk = vk_session.get_api()
    longpoll = VkLongPoll(vk_session)
    keyboard = build_keyboard()
    
    print("VK-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            try:
                handle_event(event, vk, keyboard)
            except Exception as e:
                print("Error handling event:", e)

if __name__ == "__main__":
    main()